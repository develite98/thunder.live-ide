/**
 * Monorepo for all the tooling which enables ESLint to support TypeScript.
 *
 * "OUR PLACE, OUR RULES"
 *
 * Each rule was carefully reviewed. So DON'T BLAME THE STRICT RULES because they really make us have better thinkings in coding practice  * and review process, They are also helpful for future maintenance.
 *
 * STOP MANUALLY MODIFYING THIS FILE. PLEASE CONTACT THE OWNER OR YOUR TEAM LEADER WHEN YOU WANT TO MODIFY THESE RULES
 */
{
  "root": true,
  "ignorePatterns": ["**/*"],
  "plugins": ["@nrwl/nx"],
  "overrides": [
    {
      "files": ["*.ts"],
      "extends": ["plugin:@nrwl/nx/typescript", "plugin:@nrwl/nx/angular", "plugin:@angular-eslint/template/process-inline-templates"],
      "parserOptions": { "project": "./tsconfig.*?.json" },
      "rules": {
        // Eslint
        "no-else-return": ["error"],
        "no-empty-character-class": ["error"],

        // Typescript eslint
        "@typescript-eslint/adjacent-overload-signatures": ["error"],
        "@typescript-eslint/array-type": ["error"],
        "@typescript-eslint/await-thenable": ["error"],
        "@typescript-eslint/ban-ts-comment": ["error"],
        "@typescript-eslint/ban-tslint-comment": ["error"],
        "@typescript-eslint/ban-types": ["error"],
        // Note you must disable the base rule as it can report incorrect errors
        "brace-style": "off",
        "@typescript-eslint/brace-style": ["error"],
        "@typescript-eslint/camelcase": "off",
        "@typescript-eslint/class-literal-property-style": ["error", "fields"],
        // Note you must disable the base rule as it can report incorrect errors
        "comma-dangle": "off",
        "@typescript-eslint/comma-dangle": ["error", "never"],
        // Note you must disable the base rule as it can report incorrect errors
        "comma-spacing": "off",
        "@typescript-eslint/comma-spacing": ["error", { "before": false, "after": true }],
        "@typescript-eslint/consistent-indexed-object-style": ["error", "record"],
        "@typescript-eslint/consistent-type-assertions": ["error", { "assertionStyle": "as", "objectLiteralTypeAssertions": "never" }],
        "@typescript-eslint/consistent-type-definitions": "off",
        "@typescript-eslint/consistent-type-imports": [
          "error",
          {
            "prefer": "no-type-imports",
            "disallowTypeAnnotations": true
          }
        ],
        // Note you must disable the base rule as it can report incorrect errors
        "default-param-last": "off",
        "@typescript-eslint/default-param-last": ["error"],
        // Note you must disable the base rule as it can report incorrect errors
        "dot-notation": "off",
        "@typescript-eslint/dot-notation": ["error"],
        "@typescript-eslint/explicit-function-return-type": ["error"],
        "@typescript-eslint/explicit-member-accessibility": [
          "error",
          {
            "accessibility": "explicit",
            "overrides": {
              "accessors": "explicit",
              "methods": "explicit",
              "properties": "explicit",
              "constructors": "no-public",
              "parameterProperties": "off"
            }
          }
        ],
        "@typescript-eslint/explicit-module-boundary-types": "off",
        // Note you must disable the base rule as it can report incorrect errors
        "func-call-spacing": "off",
        "@typescript-eslint/func-call-spacing": ["error", "never"],
        // Note you must disable the base rule as it can report incorrect errors
        "indent": "off",
        "@typescript-eslint/indent": ["error", 2],
        // Note you must disable the base rule as it can report incorrect errors
        "init-declarations": "off",
        "@typescript-eslint/init-declarations": ["error"],
        // Note you must disable the base rule as it can report incorrect errors
        "keyword-spacing": "off",
        "@typescript-eslint/keyword-spacing": ["error"],
        // Note you must disable the base rule as it can report incorrect errors
        "lines-between-class-members": "off",
        "@typescript-eslint/lines-between-class-members": ["error"],
        "@typescript-eslint/member-delimiter-style": ["error"],
        "@typescript-eslint/member-ordering": [
          "error",
          {
            "default": [
              // Index signature
              "signature",
              // Fields
              "public-static-field",
              "protected-static-field",
              "private-static-field",
              "public-decorated-field",
              "protected-decorated-field",
              "private-decorated-field",
              "public-instance-field",
              "protected-instance-field",
              "private-instance-field",
              "public-abstract-field",
              "protected-abstract-field",
              "private-abstract-field",
              // Constructors
              "public-constructor",
              "protected-constructor",
              "private-constructor",
              // Methods
              "public-static-method",
              "protected-static-method",
              "private-static-method",
              "public-decorated-method",
              "protected-decorated-method",
              "private-decorated-method",
              "public-instance-method",
              "protected-instance-method",
              "private-instance-method",
              "public-abstract-method",
              "protected-abstract-method",
              "private-abstract-method"
            ]
          }
        ],
        "@typescript-eslint/method-signature-style": ["error"],
        // Note you must disable the base rule as it can report incorrect errors
        "camelcase": "off",
        "@typescript-eslint/naming-convention": [
          "error",
          {
            "selector": "interface",
            "format": ["PascalCase"],
            "custom": {
              "regex": "^I[A-Z]",
              "match": true
            }
          },
          {
            "selector": "typeParameter",
            "format": ["PascalCase"],
            "prefix": ["T", "R", "U", "V"]
          },
          {
            "selector": ["variable", "parameter", "property"],
            "types": ["boolean"],
            "format": ["PascalCase"],
            "prefix": ["is", "should", "has", "can", "did", "will"],
            "filter": {
              "regex": "^(production|readonly)$",
              "match": false
            }
          },
          {
            "selector": ["variable", "property", "parameter", "function", "classMethod", "objectLiteralMethod", "typeMethod"],
            "format": ["camelCase"]
          },
          {
            "selector": "classProperty",
            "modifiers": ["private"],
            "format": ["camelCase"],
            "leadingUnderscore": "require"
          },
          {
            "selector": "classProperty",
            "modifiers": ["static"],
            "format": ["UPPER_CASE"]
          }
        ],
        // Note you must disable the base rule as it can report incorrect errors
        "no-array-constructor": "off",
        "@typescript-eslint/no-array-constructor": ["error"],
        "@typescript-eslint/no-base-to-string": ["error"],
        "@typescript-eslint/no-confusing-non-null-assertion": ["error"],
        "@typescript-eslint/no-confusing-void-expression": ["error"],
        // Note you must disable the base rule as it can report incorrect errors
        "no-dupe-class-members": "off",
        "@typescript-eslint/no-dupe-class-members": ["error"],
        // Note you must disable the base rule as it can report incorrect errors
        "no-duplicate-imports": "off",
        "@typescript-eslint/no-duplicate-imports": ["error"],
        "@typescript-eslint/no-dynamic-delete": ["error"],
        // Note you must disable the base rule as it can report incorrect errors
        "no-empty-function": "off",
        "@typescript-eslint/no-empty-function": ["error"],
        "@typescript-eslint/no-empty-interface": ["error"],
        "@typescript-eslint/no-explicit-any": ["error"],
        "@typescript-eslint/no-extra-non-null-assertion": ["error"],
        // Note you must disable the base rule as it can report incorrect errors
        "no-extra-parens": "off",
        "@typescript-eslint/no-extra-parens": ["error"],
        // Note you must disable the base rule as it can report incorrect errors
        "no-extra-semi": "off",
        "@typescript-eslint/no-extra-semi": ["error"],
        "@typescript-eslint/no-extraneous-class": [
          "error",
          {
            "allowEmpty": true
          }
        ],
        "@typescript-eslint/no-floating-promises": ["error"],
        "@typescript-eslint/no-for-in-array": ["error"],
        "@typescript-eslint/no-implicit-any-catch": ["error"],
        // Note you must disable the base rule as it can report incorrect errors
        "no-implied-eval": "off",
        "@typescript-eslint/no-implied-eval": ["error"],
        "@typescript-eslint/no-inferrable-types": "off",
        // Note you must disable the base rule as it can report incorrect errors
        "no-invalid-this": "off",
        "@typescript-eslint/no-invalid-this": ["error"],
        "@typescript-eslint/no-invalid-void-type": ["error"],
        // Note you must disable the base rule as it can report incorrect errors
        "no-loop-func": "off",
        "@typescript-eslint/no-loop-func": ["error"],
        // Note you must disable the base rule as it can report incorrect errors
        "no-loss-of-precision": "off",
        "@typescript-eslint/no-loss-of-precision": ["error"],
        // Note you must disable the base rule as it can report incorrect errors
        "no-magic-numbers": "off",
        "@typescript-eslint/no-magic-numbers": [
          "error",
          {
            "ignoreArrayIndexes": true,
            "ignoreDefaultValues": true,
            "ignoreEnums": true,
            "ignoreNumericLiteralTypes": true,
            "ignoreReadonlyClassProperties": true
          }
        ],
        "@typescript-eslint/no-misused-new": "error",
        "@typescript-eslint/no-misused-promises": ["error"],
        "@typescript-eslint/no-namespace": ["error"],
        "@typescript-eslint/no-non-null-asserted-optional-chain": ["error"],
        "@typescript-eslint/no-non-null-assertion": ["error"],
        "@typescript-eslint/no-parameter-properties": [
          "error",
          { "allows": ["public readonly", "protected readonly", "private readonly"] }
        ],
        // Note you must disable the base rule as it can report incorrect errors
        "no-redeclare": "off",
        "@typescript-eslint/no-redeclare": [
          "error",
          {
            "ignoreDeclarationMerge": false
          }
        ],
        "@typescript-eslint/no-require-imports": ["error"],
        // Note you must disable the base rule as it can report incorrect errors
        "no-shadow": "off",
        "@typescript-eslint/no-shadow": ["error", { "ignoreTypeValueShadow": false, "ignoreFunctionTypeParameterNameValueShadow": false }],
        "@typescript-eslint/no-this-alias": [
          "error",
          {
            "allowDestructuring": true,
            "allowedNames": ["self"]
          }
        ],
        // Note you must disable the base rule as it can report incorrect errors
        "no-throw-literal": "off",
        "@typescript-eslint/no-throw-literal": ["error"],

        // Nx rules
        "@nrwl/nx/enforce-module-boundaries": [
          "error",
          {
            "enforceBuildableLibDependency": true,
            "allow": [],
            "depConstraints": [{ "sourceTag": "*", "onlyDependOnLibsWithTags": ["*"] }]
          }
        ],

        // Not formatted
        "@typescript-eslint/typedef": [
          "error",
          {
            "arrayDestructuring": true,
            "arrowParameter": true,
            "memberVariableDeclaration": true,
            "objectDestructuring": true,
            "parameter": true,
            "propertyDeclaration": true,
            "variableDeclaration": true,
            "variableDeclarationIgnoreFunction": true
          }
        ],
        "@typescript-eslint/no-unused-vars": ["error"]
      }
    },
    {
      "files": ["*.html"],
      "extends": ["plugin:@nrwl/nx/angular-template"],
      "rules": {}
    }
  ]
}
